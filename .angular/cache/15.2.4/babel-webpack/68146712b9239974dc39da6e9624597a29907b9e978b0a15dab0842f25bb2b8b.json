{"ast":null,"code":"import { webSocket } from \"rxjs/webSocket\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nvar socketConfig = {\n  url: 'ws://localhost:8093/tache',\n  openObserver: {\n    next: function () {\n      return console.log('Connection to WebSocket is opened');\n    }\n  },\n  closeObserver: {\n    next: function () {\n      return console.log('Connection to WebSocket is closed');\n    }\n  },\n  protocol: '*',\n  deserializer: function (e) {\n    return JSON.parse(e.data);\n  },\n  serializer: function (value) {\n    return JSON.stringify(value);\n  }\n  // Reconnection options\n  // Additional headers\n};\n\nvar AppComponent = /** @class */function () {\n  function AppComponent() {\n    this.title = \"gestion projet scrum\";\n    this.messages = [];\n    this.numberOfMessages = 0;\n  }\n  AppComponent.prototype.ngOnInit = function () {\n    this.connect();\n  };\n  AppComponent.prototype.connect = function () {\n    var _this = this;\n    // use wss:// instead of ws:// for a secure connection, e.g. in production\n    this.ws = webSocket(socketConfig); // returns a WebSocketSubject\n    //  split the subject into 2 observables, depending on object.type\n    this.message$ = this.ws.multiplex(function () {\n      return {\n        subscribe: 'message'\n      };\n    }, function () {\n      return {\n        unsubscribe: 'message'\n      };\n    }, function (message) {\n      return message.type === 'message';\n    });\n    this.messageNumber$ = this.ws.multiplex(function () {\n      return {\n        subscribe: 'messageNumber'\n      };\n    }, function () {\n      return {\n        unsubscribe: 'messageNumber'\n      };\n    }, function (message) {\n      return message.type === 'messageNumber';\n    });\n    // subscribe to messages sent from the server\n    this.message$.subscribe(function (value) {\n      return _this.messages.push(value);\n    }, function (error) {\n      return _this.handleError(error);\n    }, function () {\n      return _this.disconnect();\n    });\n    // get the number of the messages from the server\n    this.messageNumber$.subscribe(function (value) {\n      return _this.numberOfMessages = value.messagecount;\n    }, function (error) {\n      return _this.disconnect(error);\n    });\n    this.setConnected(true);\n  };\n  AppComponent.prototype.disconnect = function (err) {\n    if (err) {\n      console.error(err);\n    }\n    this.setConnected(false);\n    console.log('Disconnected');\n  };\n  AppComponent.prototype.sendMessage = function () {\n    this.ws.next({\n      name: this.name,\n      message: this.message,\n      type: 'message'\n    });\n    this.message = '';\n  };\n  AppComponent.prototype.setConnected = function (connected) {\n    this.connected = connected;\n    this.messages = [];\n  };\n  AppComponent.prototype.handleError = function (error) {\n    console.error(error);\n    // Affichez les détails de l'erreur dans la console ou affichez-les dans l'interface utilisateur\n  };\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 1,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"router-outlet\");\n      }\n    },\n    dependencies: [i1.RouterOutlet]\n  });\n  return AppComponent;\n}();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}