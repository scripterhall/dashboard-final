{"ast":null,"code":"import { __decorate, __metadata, __values } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { AntiVerusService } from \"src/app/service/anti-verus.service\";\nimport { DossierService } from \"src/app/service/dossier.service\";\nvar TablesComponent = /** @class */function () {\n  function TablesComponent(toastr, dossierService, antiVerusService, router) {\n    this.toastr = toastr;\n    this.dossierService = dossierService;\n    this.antiVerusService = antiVerusService;\n    this.router = router;\n    this.zip = new JSZip();\n    this.formData = new FormData();\n    this.verus = true;\n  }\n  TablesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.folderName = \"\";\n    var projet = JSON.parse(localStorage.getItem('projet'));\n    this.dossierService.recupererDossierDeProjet(projet.id).subscribe(function (data) {\n      if (data) _this.projetDos = data;\n      console.log(data);\n    });\n  };\n  TablesComponent.prototype.onFileChange = function (event) {\n    var e_1, _a;\n    var _this = this;\n    var files = event.target.files;\n    this.folderName = files[0].webkitRelativePath.split('/')[0];\n    var totalSize = 0;\n    for (var i = 0; i < files.length; i++) {\n      totalSize += files[i].size;\n    }\n    if (totalSize > 300000000) {\n      console.log(\"error\");\n      this.toastr.error(\"ce fichier contient plus que 1GB\");\n      event.target.value = '';\n    } else {\n      var folderNameDiv = document.getElementById(\"folderName\");\n      var folderDiv = document.getElementById(\"folder\");\n      folderDiv.classList.add(\"has-files\");\n      folderNameDiv.innerHTML = \"nom de dossier : \" + this.folderName;\n      try {\n        for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {\n          var file = files_1_1.value;\n          var path = file.webkitRelativePath.split(\"\".concat(this.folderName, \"/\"))[1];\n          this.zip.file(path, file);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (files_1_1 && !files_1_1.done && (_a = files_1.return)) _a.call(files_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      this.antiVerusService.checkVerus(this.zip).then(function (response) {\n        _this.antiVerusService.getReport().subscribe(function (resultat) {\n          if (resultat.data.attributes.stats.malicious > 0) {\n            _this.toastr.error(\"Virus détecté !! \\nAttention a ce que vous emettez dans l'application\");\n            _this.reloadPage();\n          } else {\n            _this.toastr.success(\"Dossier sain.\");\n            _this.verus = false;\n          }\n        });\n      });\n    }\n  };\n  TablesComponent.prototype.reloadPage = function () {\n    var _this = this;\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(function () {\n      _this.router.navigate([_this.router.url]);\n    });\n  };\n  TablesComponent.prototype.uploadDos = function () {\n    var _this = this;\n    this.zip.generateAsync({\n      type: 'blob'\n    }).then(function (content) {\n      var formData = new FormData();\n      formData.append(\"compressedFile\", content, \"\".concat(_this.folderName, \".zip\"));\n      /** appel au service Dossier */\n      var dossier = {\n        projetId: JSON.parse(localStorage.getItem('projet')).id,\n        membreId: JSON.parse(localStorage.getItem('membre')).id,\n        donnees: formData,\n        nomDossier: _this.folderName\n      };\n      _this.dossierService.sauvegarderDossier(dossier).subscribe(function (data) {\n        console.log(data);\n        _this.projetDos.push(data);\n      });\n      /** end */\n    });\n  };\n\n  TablesComponent = __decorate([Component({\n    selector: \"app-tables\",\n    templateUrl: \"tables.component.html\",\n    styleUrls: ['./tables.component.scss']\n  }), __metadata(\"design:paramtypes\", [ToastrService, DossierService, AntiVerusService, Router])], TablesComponent);\n  return TablesComponent;\n}();\nexport { TablesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}